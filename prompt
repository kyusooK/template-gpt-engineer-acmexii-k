Please implement for this Event Storming Model:

{{{contexts.json}}}


I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library (must use Consumer @Beans instead of @StreamListener)
- JUnit Test


SELF-CRITICISM: 

 - when you create pom.xml, USE parent project to spring boot 3.1.4
 - when you create pom.xml, DO NOT missing data-rest dependency
 - when you create pom.xml, you MUST specify the 2022.0.3 for the spring-cloud, 4.0.4 for the spring-cloud-streams version in properties
 - Also, in pom.xml, use '{{{options.rootPackage}}}' as the groupId of the project and '{{{name}}}' as the artifactId.
 - Please generate start from pom.xml

 - When you create application.yml, You need to activate 'default' profiles: (spring.config.activate.on-profile: default)
 - Configure to use local Kafka (spring.cloud.stream.kafka.binder.brokers: localhost:9092)  
 {{#if policies}}- Set up rules to route to different functions based on the 'type' of the message header.{{else}}- Set up rules to route.{{/if}} These must be defined as the value of the 'spring.cloud.function.routing-expression' key in 'application.yml'. If they're generated as 'spring.cloud.stream', they should be created under the 'cloud' in the same position as the 'stream' and 'function'. not under the 'stream' in 'function'.
 - The routing rule is: {{#if policies}}{{#aggregates}}{{#policyList}}{{#incomingEventRefs}}'{{value.namePascalCase}}' should be routed to the 'whenever{{value.namePascalCase}}_{{../namePascalCase}}' function,{{/incomingEventRefs}}{{/policyList}}{{/aggregates}} and in other cases, it should be routed to the 'discardFunction'.{{else}}it should be routed exclusively to the 'discardFunction'.{{/if}}
 - Message binding settings has :
 - Consumer configuration: Through the 'functionRouter-in-0' binding, it belongs to the {{{name}}} group and receives messages from the '{{{options.rootPackage}}}' destination. set contentType to application/json.
 - Producer configuration: Sends messages to the '{{{options.rootPackage}}}' destination via the 'producer-out-0' binding. set contentType to application/json.

 - You must create main application to run the application.
 - Kafka Consumer Beans should not be created in @Configuration Config file, but should be created in a Service class that leverages domain events with an appropriate Repository and StreamBridge.
 - When you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:


```
mvn [command] --no-transfer-progress
```

<function>

  var cache = []
  const includingKeys = ["", "_type", "fieldDescriptors", "className", "displayName", "events", "aggregateRoot", "aggregates", "policies", "commands", "actors", "name"]
  const cycleAvoid = (key, value) => {
                  if (isNaN(key) && !includingKeys.includes(key)) return;

                  //// shorten the type name
                  if(key == "_type" && value && value.indexOf('.') > 1) value = value.split(".").pop()
    
                  if (typeof value === 'object' && value !== null) {
                    // Duplicate reference found, discard key
                    if (cache.includes(value)) return;
                
                    // Store value in our collection
                    cache.push(value);
                  }
                  return value;
                }
this.contexts.json = JSON.stringify(this, cycleAvoid)


</function>
